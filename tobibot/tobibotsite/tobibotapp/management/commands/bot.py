import os
from datetime import datetime
from pprint import pprint

from django.core.exceptions import ValidationError
from django.core.management.base import BaseCommand
from django.core.validators import URLValidator
from telebot import TeleBot  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–æ—Ç
from telebot import types  # –ü–æ–¥–∫–ª—é—á–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
from telebot import custom_filters
from telebot import formatting
from telebot.storage import StateRedisStorage
from tobibotapp.models import Branch, Building, Resident

from .config.config import get_config
from .lib.email import get_confirm_code, send_email
from .lib.states import RegisterStates
from .lib.validators import is_date_valid, is_email_valid, is_phone_valid

DEBUG = True


bot_name, bot_token, redis_password = get_config()
bot = TeleBot(bot_token)  # –ü–æ–¥–∫–ª—é—á–∏–ª–∏ —Ç–æ–∫–µ–Ω
state_storage = StateRedisStorage(
    password=redis_password)  # –°–æ–∑–¥–∞–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã
# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Å—Ä–µ–¥–µ Django –∫–æ–º–∞–Ω–¥–æ–π:
# python manage.py bot


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞'

    def handle(self, *args, **options):
        bot.add_custom_filter(custom_filters.StateFilter(bot))
        bot.infinity_polling(skip_pending=True)  # –ó–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã /start –∏ /help
@bot.message_handler(commands=['start', 'help'])
def start_help(message):
    # –û—Ç–ª–∞–¥–∫–∞
    if DEBUG:
        print('start/help')

    # –ï—Å–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –±–æ—Ç–∞, —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–∏—É–µ–º
    if message.from_user.is_bot:
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–æ—Ç, —Ç–æ —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ redis —Å–æ—Å—Ç–æ—è–Ω–∏–µ tg_user_id_username
    # –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –¥–∞–Ω–Ω—ã–µ tg_user_id –∏ tg_username
    bot.set_state(
        message.from_user.id,
        RegisterStates.tg_user_id_username,
        message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['tg_user_id'] = message.from_user.id
        data['tg_username'] = message.from_user.username

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º id –∏–∑ –ë–î
    resident = Resident.objects.filter(tg_user_id=message.from_user.id).first()

    # –ï—Å–ª–∏ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å –µ—Å—Ç—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Å–∫–∞–∑–∫—É
    if resident is not None or message.text == '/help':
        text = '''
–î–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –±–∏–∑–Ω–µ—Å–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /catalog

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö –±–∏–∑–Ω–µ—Å-–∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –∏ —Ü–µ–Ω—Ç—Ä–∞ "–ú–æ–π –ë–∏–∑–Ω–µ—Å" –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /events

–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /support

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∑–∞–ª, –∫–ª–∞—Å—Å –∏–ª–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /book

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –±–∏–∑–Ω–µ—Å-–∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –∏ —Ü–µ–Ω—Ç—Ä–∞ "–ú–æ–π –ë–∏–∑–Ω–µ—Å" –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /propose
        '''
        bot.send_message(message.chat.id, text)
    else:
        keyboard = types.ReplyKeyboardMarkup(
            row_width=1, one_time_keyboard=True, resize_keyboard=True)

        button_reg = types.KeyboardButton(
            text="–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø", request_contact=True)
        keyboard.add(button_reg)
        text = '''
–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.

–Ø –ø–æ–º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ.

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <<–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø>> –∏ –¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ï—Å–ª–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ Telegram –∑–∞–ø–æ–ª–Ω–µ–Ω –≤–µ—Ä–Ω–æ, —Ç–æ –≤–∞–º –Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è –≤–≤–æ–¥–∏—Ç—å –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é.

–í–ù–ò–ú–ê–ù–ò–ï! –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É <<–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø>> –≤—ã –¥–∞—ë—Ç–µ –ì–£ –¢–û "–¢—É–ª—å—Å–∫–∏–π –æ–±–ª–∞—Å—Ç–Ω–æ–π –±–∏–∑–Ω–µ—Å-–∏–Ω–∫—É–±–∞—Ç–æ—Ä" —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§. 
            '''
        bot.send_message(message.chat.id, text, reply_markup=keyboard)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /state
@bot.message_handler(commands=['state'])
def state(message):
    bot_state = bot.get_state(message.from_user.id, message.chat.id)
    bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: {bot_state}')


# –û–±—ä—è–≤–∏–ª–∏ –≤–µ—Ç–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –Ω–∞ —Ç–æ—Ç —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(content_types=['contact'])
def contact(message):
    # –û—Ç–ª–∞–¥–∫–∞
    if DEBUG:
        print('contact')

    if message.contact is not None:  # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç contact –Ω–µ –ø—É—Å—Ç–æ–π
        if message.contact.first_name is not None\
                and message.contact.last_name is not None\
                and message.contact.phone_number is not None\
                and message.from_user.username is not None:

            text = f'''
–í–∞—à–µ –∏–º—è: {message.contact.first_name}
–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: {message.contact.last_name}
–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.contact.phone_number}

–í—Å—ë –≤–µ—Ä–Ω–æ?
        '''
            keyboard = types.InlineKeyboardMarkup()
            # –ü–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ "–î–ê" –ø–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            button_yes = types.InlineKeyboardButton(
                text='–î–ê', callback_data=message.contact.phone_number)
            # –ü–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ "–ù–ï–¢" –ø–µ—Ä–µ–¥–∞–µ–º
            button_no = types.InlineKeyboardButton(
                text='–ù–ï–¢', callback_data='wrong_contacts')
            keyboard.add(button_yes)
            keyboard.add(button_no)
            bot.send_message(message.chat.id, text, reply_markup=keyboard)
        else:
            text = '''
–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ Telegram –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
–°–æ–∂–∞–ª–µ—é, –Ω–æ –ø—Ä–∏–¥—ë—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.

–ò—Ç–∞–∫, –≤–∞—à–µ –∏–º—è:
'''
            bot.set_state(
                message.from_user.id,
                RegisterStates.first_name,
                message.chat.id)

            bot.send_message(message.chat.id, text)


@bot.message_handler(state=RegisterStates.first_name)
def get_first_name(message):

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['first_name'] = message.text

    bot.set_state(
        message.from_user.id,
        RegisterStates.last_name,
        message.chat.id)

    text = '''
–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–æ –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 3 –∏–∑ 15 üõ´.

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:
    '''

    bot.send_message(message.chat.id, text)


@bot.message_handler(state=RegisterStates.last_name)
def get_last_name(message):

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['last_name'] = message.text

    bot.set_state(
        message.from_user.id,
        RegisterStates.phone,
        message.chat.id)

    text = '''
–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–µ–Ω–∞ –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 4 –∏–∑ 15 üõ´.

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
    '''

    bot.send_message(message.chat.id, text)


@bot.message_handler(state=RegisterStates.phone)
def get_phone(message):

    if is_phone_valid(message.text):
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['phone'] = message.text

        bot.set_state(
            message.from_user.id,
            RegisterStates.email,
            message.chat.id)

        text = '''
–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 5 –∏–∑ 15 üõ´.

–¢–µ–ø–µ—Ä—å —è –ø–æ–ø—Ä–æ—à—É —É –≤–∞—Å –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.

–ò–¥–µ–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —ç—Ç–∞ –ø–æ—á—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
–≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.

–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏–º —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–±—É—á–∞—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –æ–±—Å—É–¥–∏—Ç—å —Å –≤–∞–º–∏ —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∏—Ö.

–ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—á–µ–Ω—å –ø–æ–º–æ–≥—É—Ç –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –∏ –¥–∞–¥—É—Ç –º–∞—Å—Å—É –Ω–æ–≤—ã—Ö –∏–¥–µ–π üí°.

–ò—Ç–∞–∫, –≤–∞—à–∞ –ø–æ—á—Ç–∞:
        '''

    else:
        bot.set_state(
            message.from_user.id,
            RegisterStates.phone,
            message.chat.id)

        text = '''
–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:
'''

    bot.send_message(message.chat.id, text)


@bot.message_handler(state='*', commands=['cancel'])
def any_state(message):
    if DEBUG:
        report = f'''
message_handler(state='*', commands=['cancel'])
message.text: {message.text}
message.from_user.id: {message.from_user.id}
message.chat.id: {message.chat.id}
        '''
        print(report)

    bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    bot.delete_state(message.from_user.id, message.chat.id)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    # –û—Ç–ª–∞–¥–∫–∞
    if DEBUG:
        print(f'callback_worker with call.data: {call.data}')

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–∞—Ç–∏–µ
    # –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–≤–∞–ª–æ —ç—Ç–æ—Ç
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    # (—á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ —Ç—ã–∫–∞–ª–∏ :)
    bot.edit_message_reply_markup(
        call.message.chat.id, call.message.message_id)

    if is_phone_valid(call.data):
        # –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–æ
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ email
        bot.set_state(
            call.from_user.id,
            RegisterStates.email,
            call.message.chat.id)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ redis —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
        # 1. tg_user_id
        # 2. tg_username
        # 3. first_name
        # 4. last_name
        # 5. phone
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['tg_user_id'] = call.from_user.id
            data['tg_username'] = call.from_user.username
            data['first_name'] = call.from_user.first_name
            data['last_name'] = call.from_user.last_name
            data['phone'] = call.data

        text = '''
–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 5/15 üõ´.

–¢–µ–ø–µ—Ä—å —è –ø–æ–ø—Ä–æ—à—É —É –≤–∞—Å –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.

–ò–¥–µ–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —ç—Ç–∞ –ø–æ—á—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
–≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.

–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏–º —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–±—É—á–∞—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –æ–±—Å—É–¥–∏—Ç—å —Å –≤–∞–º–∏ —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∏—Ö.

–ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—á–µ–Ω—å –ø–æ–º–æ–≥—É—Ç –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –∏ –¥–∞–¥—É—Ç –º–∞—Å—Å—É –Ω–æ–≤—ã—Ö –∏–¥–µ–π üí°.

–ò—Ç–∞–∫, –≤–∞—à–∞ –ø–æ—á—Ç–∞:
        '''
        bot.send_message(call.message.chat.id, text)
        # –û—Ç–ª–∞–¥–∫–∞
        if DEBUG:
            report = f'''
Contacts retrieved and saved in redis.
User ID: {call.from_user.id}
Chat ID: {call.message.chat.id}
Bot state is {bot.get_state(call.from_user.id, call.message.chat.id)}
            '''
            print(report)

    elif call.data == 'wrong_contacts':
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã, —Ç–æ
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ first_name
        bot.set_state(
            call.from_user.id,
            RegisterStates.first_name,
            call.message.chat.id)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ redis —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
        # 1. tg_user_id
        # 2. tg_username

        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['tg_user_id'] = call.from_user.id
            data['tg_username'] = call.from_user.username

        text = '''
–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 2/15 üõ´.

–í–∏–¥–∏–º–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ Telegram –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ.
–°–æ–∂–∞–ª–µ—é, –ø—Ä–∏–¥–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é!

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:
        '''
        bot.send_message(call.message.chat.id, text)
    elif call.data == 'no_email':
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–ò–°–¨–ú–û –ù–ï –ü–†–ò–®–õ–û"
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ email
        bot.set_state(
            call.from_user.id,
            RegisterStates.email,
            call.message.chat.id)
        text = '''
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ –≤–≤–æ–¥–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –≤—Ä—É—á–Ω—É—é, –∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ—ë.
–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Ç–æ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.
–ò—Ç–∞–∫, –≤–∞—à–∞ –ø–æ—á—Ç–∞:
        '''
        bot.send_message(call.message.chat.id, text)

    elif call.data.split()[0] == 'Building:':
        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏–∏, —Ç–æ
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ RegisterStates.office
        bot.set_state(
            call.from_user.id,
            RegisterStates.office,
            call.message.chat.id)

        # –ü–æ–ª—É—á–∞–µ–º ID –∑–¥–∞–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Building
        # –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ redis
        building = int(call.data.split()[1])
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['building'] = building

        text = '''
–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 10 –∏–∑ 15 üõ´.

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –æ—Ñ–∏—Å–∞ –≤ –±–∏–∑–Ω–µ—Å-–∏–Ω–∫—É–±–∞—Ç–æ—Ä–µ:
        '''
        bot.send_message(call.message.chat.id, text)

    elif call.data.split()[0] == 'Branch:':
        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞, —Ç–æ
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ RegisterStates.website
        bot.set_state(
            call.from_user.id,
            RegisterStates.website,
            call.message.chat.id)

        # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Branch
        # –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ redis
        branch = int(call.data.split()[1])
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['branch'] = branch

        text = '''
–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 13 –∏–∑ 15 üõ´.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Å–∞–π—Ç
(–µ—Å–ª–∏ —Å–∞–π—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ—Ü—Å–µ—Ç—å):
        '''
        bot.send_message(call.message.chat.id, text)

    elif call.data.split()[0] == 'Branch_to_find_residents:':
        branch_id = int(call.data.split()[1])
        if DEBUG:
            print(f'Branch ID selected: {branch_id}')

        residents = Resident.objects.filter(branch=branch_id)
        for resident in residents:
            if DEBUG:
                print(f'Resident found: {resident.company}')

            # with open(resident.photo, 'rb') as photo:
            demo_text = '''
<b>bold</b>, <strong>bold</strong>
<i>italic</i>, <em>italic</em>
<u>underline</u>, <ins>underline</ins>
<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
<span class="tg-spoiler">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>
<b>bold <i>italic bold <s>italic bold strikethrough <span class="tg-spoiler">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>
<a href="http://www.example.com/">inline URL</a>
<a href="tg://user?id=123456789">inline mention of a user</a>
<code>inline fixed-width code</code>
<pre>pre-formatted fixed-width code block</pre>
<pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>
            '''

            text = f'''
<b>{resident.company}</b>
<em>{resident.description}</em>

–ö–æ–Ω—Ç–∞–∫—Ç—ã:
<b>{resident.first_name} {resident.last_name}</b>
<a href="tg://user?id={resident.tg_user_id}">–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram</a>
<a href="tel:{resident.phone}">–ü–æ–∑–≤–æ–Ω–∏—Ç—å: {resident.phone}</a>
<a href="mailto:{resident.email}">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—á—Ç—É –Ω–∞: {resident.email}</a>
<a href="{resident.socials}">–°–æ—Ü—Å–µ—Ç—å: {resident.socials}</a>
<a href="{resident.website}">–°–∞–π—Ç: {resident.website}</a>
–ê–¥—Ä–µ—Å: {resident.building}, –æ—Ñ–∏—Å {resident.office}
                    '''

            if DEBUG:
                print(text)

            bot.send_photo(
                call.message.chat.id,
                resident.photo,
                caption=text,
                parse_mode='HTML')


@bot.message_handler(state=RegisterStates.email)
def get_email(message):
    # –û—Ç–ª–∞–¥–∫–∞
    if DEBUG:
        report = f'''
@bot.message_handler(state=RegisterStates.email)
def get_email(message)

User ID: {message.from_user.id}
Chat ID: {message.chat.id}
        '''
        print(report)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
    email = message.text.strip()
    if is_email_valid(email):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥
        email_confirm_code = get_confirm_code()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –≤ RegisterStates.email_confirm
        bot.set_state(
            message.from_user.id,
            RegisterStates.email_confirm,
            message.chat.id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞ –∏–∑ redis
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É
            data['email'] = email
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            data['email_confirm_code'] = email_confirm_code

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        send_email(
            email, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã',
            email_confirm_code)

        text = '''
–û—Ç–ª–∏—á–Ω–æ üëçüèª

–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ. 

–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –µ—ë –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º.

–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É —è –æ—Ç–ø—Ä–∞–≤–∏–ª 4-–∑–Ω–∞—á–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥.

–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ –∫ –≤–∞–º, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ø–∞–ø–∫–µ "–°–ø–∞–º".

–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ —Ç–∞–º, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É
<<–ü–ò–°–¨–ú–û –ù–ï –ü–†–ò–®–õ–û>>
        '''
        keyboard = types.InlineKeyboardMarkup()
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ü–ò–°–¨–ú–û –ù–ï –ü–†–ò–®–õ–û –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª—É—á–∞–π
        button_no_email = types.InlineKeyboardButton(
            text='–ü–ò–°–¨–ú–û –ù–ï –ü–†–ò–®–õ–û', callback_data='no_email')
        keyboard.add(button_no_email)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
        bot.send_message(
            message.chat.id, text, reply_markup=keyboard)
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
        bot.set_state(
            message.from_user.id,
            RegisterStates.email,
            message.chat.id)

        # –ü—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
        bot.send_message(
            message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ—á—Ç—É –µ—â–µ —Ä–∞–∑:')


@bot.message_handler(state=RegisterStates.email_confirm)
def email_confirm(message):
    # –û—Ç–ª–∞–¥–∫–∞
    if DEBUG:
        print(f'RegisterStates.email_confirm')

    # –ë–µ—Ä–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ redis
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        email_confirm_code = data['email_confirm_code']

        if email_confirm_code == message.text.strip():
            # –ú–µ–Ω—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—á—Ç—ã –Ω–∞ CONFIRMED
            data['email_confirm_code'] = 'CONFIRMED'

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegisterStates.socials
            bot.set_state(
                message.from_user.id,
                RegisterStates.socials,
                message.chat.id)

            text = '''
Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω–Ω—ã—Ö 6 –∏–∑ 15 üõ´.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Ü—Å–µ—Ç–∏.

–≠—Ç–∞ —Å—Å—ã–ª–∫–∞  –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –¥—Ä—É–≥–∏–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º –±–∏–∑–Ω–µ—Å-–∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç "–ö–ê–¢–ê–õ–û–ì".

–¢–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∏–∑ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –±–∏–∑–Ω–µ—Å-–∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –±—É–¥–µ—Ç –ª–µ–≥—á–µ –ø–æ–Ω—è—Ç—å, —á–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∏–º –ø–æ–ª–µ–∑–Ω—ã.         
            '''

        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegisterStates.email_confirm
            bot.set_state(
                message.from_user.id,
                RegisterStates.email_confirm,
                message.chat.id)

            # –ò –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑
            text = '''
–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑.
                '''

        bot.send_message(message.chat.id, text)


@bot.message_handler(state=RegisterStates.socials)
def get_socials(message):
    # –û—Ç–ª–∞–¥–∫–∞
    if DEBUG:
        print(f'RegisterStates.socials')

    # –ü–æ–ª—É—á–∞–µ–º URL —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    url = message.text.strip()
    if url.find('https://') == -1:
        url = f'https://{url}'

    val = URLValidator()

    try:
        val(url)
    except ValidationError:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegisterStates.socials
        bot.set_state(
            message.from_user.id,
            RegisterStates.socials,
            message.chat.id)
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
        text = '''
–° –≤–∞—à–µ–π —Å—Å—ã–ª–∫–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑
        '''
        bot.send_message(message.from_user.id, text)
        return

    # –ò–Ω–∞—á–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegisterStates.birth_date
    bot.set_state(
        message.from_user.id,
        RegisterStates.birth_date,
        message.chat.id)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ redis
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['socials'] = url

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    text = '''
–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 7 –∏–∑ 15 üõ´.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–î–î.–ú–ú.–ì–ì–ì–ì, –≥–¥–µ:
* –î–î - –¥–≤—É—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 01, 13, 25)
* –ú–ú - –¥–≤—É—Ö–∑–Ω–∞—á–Ω—ã–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –≤ –≥–æ–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä 01 - —è–Ω–≤–∞—Ä—å, 04 - –∞–ø—Ä–µ–ª—å, 11 - –Ω–æ—è–±—Ä—å)
* –ì–ì–ì–ì - —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1979, 2004)

–ü—Ä–∏–º–µ—Ä:
30.04.1979 –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å 30 –∞–ø—Ä–µ–ª—è 1979 –≥–æ–¥–∞
        '''
    bot.send_message(message.chat.id, text)


@bot.message_handler(state=RegisterStates.birth_date)
def get_birth_date(message):
    # –û—Ç–ª–∞–¥–∫–∞
    if DEBUG:
        print(f'RegisterStates.birth_date')

    birth_date = message.text.strip()
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∑–∞–¥–∞–Ω–∞ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if is_date_valid(birth_date):
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –≤ redis
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['birth_date'] = birth_date

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegisterStates.photo
        bot.set_state(
            message.from_user.id,
            RegisterStates.photo,
            message.chat.id)

        # –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        text = '''
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 8 –∏–∑ 15 üõ´.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:
    '''
        bot.send_message(message.chat.id, text)

    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegisterStates.birth_date
        bot.set_state(
            message.from_user.id,
            RegisterStates.birth_date,
            message.chat.id)

        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        text = '''
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.
        '''
        bot.send_message(message.from_user.id, text)


@bot.message_handler(state=RegisterStates.photo, content_types=['photo'])
def get_photo(message):
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id=file_id)
    file_path = file_info.file_path
    file_name = file_path.split(sep='/')[-1]

    downloaded_file = bot.download_file(file_path=file_path)

    # –û—Ç–ª–∞–¥–∫–∞
    if DEBUG:
        report = f'''
RegisterStates.photo
message.photo: {message.photo}
file_id: {file_id}
file_info: {file_info}
file_path: {file_path}
file_name: {file_name}
        '''
        print(report)

    service_file_path = f'media/images/{message.from_user.id}/{file_name}'

    os.makedirs(os.path.dirname(service_file_path), exist_ok=True)

    with open(service_file_path, 'wb') as photo:
        photo.write(downloaded_file)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['photo'] = service_file_path

    bot.set_state(
        message.from_user.id,
        RegisterStates.building,
        message.chat.id)

    buildings = list(Building.objects.values_list('address', flat=True))

    keyboard = types.InlineKeyboardMarkup()
    for i, building in enumerate(buildings, start=1):
        button = types.InlineKeyboardButton(
            f'{i}. {building}', callback_data=f'Building: {i}')
        keyboard.add(button)

    text = '''
–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–æ –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 9 –∏–∑ 15 üõ´.

–í –∫–∞–∫–æ–º –∑–¥–∞–Ω–∏–∏ –∏–Ω–∫—É–±–∞—Ç–æ—Ä–∞ –≤—ã —Ä–∞—Å–ø–æ–ª–æ–∂–∏–ª–∏—Å—å?
    '''
    bot.send_message(
        message.chat.id, text, reply_markup=keyboard)


@bot.message_handler(state=RegisterStates.office)
def get_office(message):

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['office'] = message.text

    bot.set_state(
        message.from_user.id,
        RegisterStates.company,
        message.chat.id)

    text = '''
–û—Ñ–∏—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 11 –∏–∑ 15 üõ´.

–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?
    '''
    bot.send_message(message.chat.id, text)


@bot.message_handler(state=RegisterStates.company)
def get_company(message):

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['company'] = message.text

    bot.set_state(
        message.from_user.id,
        RegisterStates.branch,
        message.chat.id)

    text = '''
–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–æ –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 12 –∏–∑ 15 üõ´.

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:
    '''

    branches = list(Branch.objects.values_list('name', flat=True))

    keyboard = types.InlineKeyboardMarkup()
    for i, branch in enumerate(branches, start=1):
        button = types.InlineKeyboardButton(
            f'{i}. {branch}', callback_data=f'Branch: {i}')
        keyboard.add(button)

    bot.send_message(message.chat.id, text, reply_markup=keyboard)


@bot.message_handler(commands=['find_residents'])
def find_residents(message):
    # –û—Ç–ª–∞–¥–∫–∞
    if DEBUG:
        print('find_resdents')

        text = '''
–î–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–∏–∑–Ω–µ—Å–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:
    '''

    branches = list(Branch.objects.values_list('name', flat=True))

    keyboard = types.InlineKeyboardMarkup()
    for i, branch in enumerate(branches, start=1):
        button = types.InlineKeyboardButton(
            f'{i}. {branch}', callback_data=f'Branch_to_find_residents: {i}')
        keyboard.add(button)

    bot.send_message(message.chat.id, text, reply_markup=keyboard)


@bot.message_handler(state=RegisterStates.website)
def get_website(message):
    # –û—Ç–ª–∞–¥–∫–∞
    if DEBUG:
        print(f'RegisterStates.website')

    # –ü–æ–ª—É—á–∞–µ–º URL —Å–∞–π—Ç–∞
    url = message.text.strip()
    if url.find('https://') == -1:
        url = f'https://{url}'

    val = URLValidator()

    try:
        val(url)
    except ValidationError:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegisterStates.website
        bot.set_state(
            message.from_user.id,
            RegisterStates.website,
            message.chat.id)
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
        text = '''
–° –≤–∞—à–µ–π —Å—Å—ã–ª–∫–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑
        '''
        bot.send_message(message.from_user.id, text)
        return

    # –ò–Ω–∞—á–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegisterStates.description
    bot.set_state(
        message.from_user.id,
        RegisterStates.description,
        message.chat.id)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ redis
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['website'] = url

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
    text = '''
–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —Å–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ üëçüèª.
–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 14 –∏–∑ 15 üõ´.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.
        '''
    bot.send_message(message.chat.id, text)


@bot.message_handler(state=RegisterStates.description)
def get_description(message):
    # –û—Ç–ª–∞–¥–∫–∞
    if DEBUG:
        print(f'RegisterStates.description')

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['description'] = message.text

    text = '''
–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–æ –≤ –±–∞–∑–µ üëçüèª.
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üöÄ.

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –≤–∞—à–µ–≥–æ –∑–¥–∞–Ω–∏—è.
–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ—Å—å —Å –±–ª–∏–∂–∞–π—à–∏–º–∏ —Å–æ—Å–µ–¥—è–º–∏.

–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º. –î–µ—Ä–∂–∞—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π. –î–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞—Ö.

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –ø—É–Ω–∫—Ç "–ü–û–ú–û–©–¨" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help.
    '''
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['description'] = message.text

        print(f"type of data['birth_date'] is {type(data['birth_date'])}")
        if data['birth_date'] is not datetime:
            data['birth_date'] = datetime.strptime(
                data['birth_date'], '%d.%m.%Y')

        building_id = data['building']
        building = Building.objects.filter(id=building_id).first()
        data['building'] = building

        branch_id = data['branch']
        branch = Branch.objects.filter(id=branch_id).first()
        data['branch'] = branch

        data['registration_completed'] = True

        new_resident = Resident(**data)
        try:
            new_resident.save()
        except ValueError:
            bot.set_state(
                message.from_user.id,
                RegisterStates.description,
                message.chat.id)
            return

    bot.set_state(
        message.from_user.id,
        RegisterStates.complete,
        message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        building = data['building']

    tg_group_invites = list(
        Building.objects.values_list('tg_group_invite', flat=True))[building_id - 1]

    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(
        '–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É', url=tg_group_invites)
    keyboard.add(button)

    bot.send_message(message.chat.id, text, reply_markup=keyboard)
